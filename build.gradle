buildscript {
    ext {
        springBootVersion = '2.2.5.RELEASE'
        lombokVersion = '1.18.6'
    }
    repositories {
        jcenter()
        maven { url 'https://plugins.gradle.org/m2/' }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
        classpath 'io.spring.gradle:dependency-management-plugin:1.0.5.RELEASE'
        classpath 'gradle.plugin.com.github.spotbugs:spotbugs-gradle-plugin:1.6.11'
        classpath 'net.rdrei.android.buildtimetracker:gradle-plugin:0.11.0'
    }
}


allprojects {
    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'idea'

    group 'moe.pine.profile'

    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    repositories {
        jcenter()
    }

    compileJava {
        options.encoding = 'UTF-8'
        options.compilerArgs << '-Xlint:unchecked'
        options.compilerArgs << '-Xlint:deprecation'
    }


    // ----- JaCoCo ---------------------------------------

    apply plugin: 'jacoco'

    jacoco {
        toolVersion = '0.8.3'
    }
}

subprojects {
    apply plugin: 'io.spring.dependency-management'

    dependencyManagement {
        imports {
            mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
        }
        dependencies {
            dependency 'javax.servlet:javax.servlet-api:4.0.1'
            dependency "org.projectlombok:lombok:$lombokVersion"

            // Guava
            dependency 'com.google.guava:guava:27.0.1-jre'

            // Apache Commons
            dependency 'org.apache.commons:commons-lang3:3.8.1'
            dependency 'org.apache.commons:commons-collections4:4.3'

            // HTML Compressor
            dependency 'com.googlecode.htmlcompressor:htmlcompressor:1.5.2'
            dependency 'org.mozilla:rhino:1.7.10'

            // Utilities
            dependency 'moe.pine:spring-cache-interceptors:0.1.2'

            // Test
            dependency 'junit:junit:4.12'
            dependency 'org.mockito:mockito-core:2.24.5'
            dependency 'org.powermock:powermock-reflect:2.0.0'
        }
    }
    dependencies {
        // Lombok
        annotationProcessor 'org.projectlombok:lombok'
        compileOnly 'org.projectlombok:lombok'
        testAnnotationProcessor 'org.projectlombok:lombok'
        testCompileOnly 'org.projectlombok:lombok'

        // Logging
        implementation 'org.slf4j:slf4j-api'
        implementation 'ch.qos.logback:logback-classic'

        // Utilities
        implementation 'com.google.guava:guava'
        implementation 'org.apache.commons:commons-lang3'
        implementation 'org.apache.commons:commons-collections4'

        // Test
        testImplementation 'junit:junit'
        testImplementation 'org.mockito:mockito-core'
        testImplementation 'org.powermock:powermock-reflect'
    }


    // ----- SpotBugs -------------------------------------

    apply plugin: 'com.github.spotbugs'

    spotbugs {
        toolVersion = '3.1.8'
        excludeFilter = file("${project.rootDir}/config/findbugs-exclude.xml")
        spotbugsTest.enabled = false
    }
    tasks.withType(com.github.spotbugs.SpotBugsTask) {
        reports {
            xml.enabled = false
            html.enabled = true
        }
    }
}


// ----- JaCoCo -------------------------------------------

task jacocoMerge(type: JacocoMerge) {
    dependsOn(subprojects.jacocoTestReport.dependsOn)
    mustRunAfter(subprojects.jacocoTestReport.mustRunAfter)
    destinationFile = file("${buildDir}/jacoco/test.exec")
    executionData = files(subprojects.jacocoTestReport.executionData)
            .filter { f -> f.exists() }
}

jacocoTestReport {
    dependsOn(jacocoMerge)
    reports {
        xml.enabled = true
        html.enabled = true
    }

    additionalSourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(subprojects.sourceSets.main.output)
}


// ----- Build Time Tracker -------------------------------

apply plugin: 'build-time-tracker'

buildtimetracker {
    reporters {
        summary {
            ordered true
            barstyle 'ascii'
        }
    }
}
